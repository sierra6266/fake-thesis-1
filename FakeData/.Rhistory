View(meta_tbl)
meta_tbl %>%
left_join(tbl, by=c("variable", "label"))
m2 = meta_tbl %>%
left_join(tbl, by=c("variable", "label"))
View(m2)
m3 = m2 %>%
select(var_label, by, label, median, p25, p75, N_obs, col_name, n, N) %>%
pivot_wider(names_from = by, values_from = p, names_prefix="p_") %>% #make cols of p_1 and p_0
mutate(cat_smd2=abs((p_1-p_0)/(sqrt(((p_1*(1-p_1)+p_0*(1-p_0)))/2)))) # calculate SMD
m3 = m2 %>%
select(var_label, by, label, median, p25, p75, N_obs, col_name, n, N, p) %>%
pivot_wider(names_from = by, values_from = p, names_prefix="p_") %>% #make cols of p_1 and p_0
mutate(cat_smd2=abs((p_1-p_0)/(sqrt(((p_1*(1-p_1)+p_0*(1-p_0)))/2)))) # calculate SMD
View(m3)
m3 = m2 %>%
select(var_label, by, label, median, p25, p75, N_obs, col_name, n, N, p) %>%
pivot_wider(names_from = by, values_from = p, names_prefix="p_")
View(m3)
m3 = m2 %>%
select(var_label, by, label, median, p25, p75, N_obs, n, N, p) %>%
pivot_wider(names_from = by, values_from = p, names_prefix="p_") %>% #make cols of p_1 and p_0
mutate(cat_smd2=abs((p_1-p_0)/(sqrt(((p_1*(1-p_1)+p_0*(1-p_0)))/2)))) # calculate SMD
m3 = m2 %>%
select(var_label, by, label, median, p25, p75, N_obs, n, N, p, col_name) %>%
pivot_wider(names_from = col_name, values_from = p, names_prefix="p_") %>% #make cols of p_1 and p_0
mutate(cat_smd2=abs((p_1-p_0)/(sqrt(((p_1*(1-p_1)+p_0*(1-p_0)))/2)))) # calculate SMD
m3 = m2 %>%
select(var_label, by, label, median, p25, p75, N_obs, n, N, p, col_name) %>%
pivot_wider(names_from = col_name, values_from = p, names_prefix="p_") %>% #make cols of p_1 and p_0
mutate(cat_smd2=abs((p_stat_2-p_stat_1)/(sqrt(((p_stat_2*(1-p_stat_2)+p_stat_1*(1-p_stat_1)))/2)))) # calculate SMD
View(m3)
m4 = t1$meta_data %>% # grab the meta data
unnest() %>% # put the lists into one df
#filter(summary_type == "categorical" & !is.na(by)) %>% # get rid of the continuous vars and overall proportions
select(variable, label, by, p, n, N, median, p25, p75) %>%
pivot_wider(names_from = by, values_from = p, names_prefix="p_") %>% #make cols of p_1 and p_0
mutate(cat_smd=abs((p_1-p_0)/(sqrt(((p_1*(1-p_1)+p_0*(1-p_0)))/2)))) # calculate SMD
View(m4)
m4 = t1$meta_data %>% # grab the meta data
unnest() %>% # put the lists into one df
#filter(summary_type == "categorical" & !is.na(by)) %>% # get rid of the continuous vars and overall proportions
select(variable, label, by, p, n, N, median, p25, p75) %>%
pivot_wider(names_from = by, values_from = c(n, N, median, p25, p75, p), names_prefix="p_") %>% #make cols of p_1 and p_0
mutate(cat_smd=abs((p_1-p_0)/(sqrt(((p_1*(1-p_1)+p_0*(1-p_0)))/2)))) # calculate SMD
m4 = t1$meta_data %>% # grab the meta data
unnest() %>% # put the lists into one df
#filter(summary_type == "categorical" & !is.na(by)) %>% # get rid of the continuous vars and overall proportions
select(variable, label, by, p, n, N, median, p25, p75) %>%
pivot_wider(names_from = by, values_from = c(n, N, median, p25, p75, p), names_prefix="p_")
View(m4)
m4 = t1$meta_data %>% # grab the meta data
unnest() %>% # put the lists into one df
#filter(summary_type == "categorical" & !is.na(by)) %>% # get rid of the continuous vars and overall proportions
select(variable, label, by, p, n, N, median, p25, p75) %>%
pivot_wider(names_from = by, values_from = c(n, N, median, p25, p75, p), names_prefix="stat_")
View(m4)
m4 = t1$meta_data %>% # grab the meta data
unnest() %>% # put the lists into one df
#filter(summary_type == "categorical" & !is.na(by)) %>% # get rid of the continuous vars and overall proportions
select(variable, label, by, p, n, N, median, p25, p75) %>%
pivot_wider(names_from = by, values_from = c(n, N, median, p25, p75, p)) %>% #make cols of p_1 and p_0
mutate(cat_smd=abs((p_1-p_0)/(sqrt(((p_1*(1-p_1)+p_0*(1-p_0)))/2)))) # calculate SMD
View(m4)
View(key)
View(t1)
t1
tst = t1$meta_data
View(tst)
View(tst[[8]][[1]])
View(tst[[8]][[2]])
View(tst[[8]][[4]])
tst = t1$meta_data$df_stats
tst = t1$meta_data$df_stats[[2]]
p_0 = p(where by ==0)
View(tbl)
View(m3)
View(m4)
knitr::opts_chunk$set(echo = TRUE)
gtsummary::trial %>%
select(response, age, marker) %>%
tbl_uvregression(
y = response,
method = glm,
method.args = list(family = binomial),
exponentiate = TRUE,
hide_n = TRUE)
tbl_custom_summary(
include = c("Age", "Class"),
by = "Sex",
stat_fns = ~ proportion_summary("Survived", "Yes", weights = "Freq"),
statistic = ~"{prop}% ({n}/{N}) [{conf.low}-{conf.high}]",
digits = ~ list(
function(x) {
style_percent(x, digits = 1)
},
0, 0, style_percent, style_percent
),
overall_row = TRUE,
overall_row_last = TRUE
) %>%
bold_labels() %>%
modify_footnote(
update = all_stat_cols() ~ "Proportion (%) of survivors (n/N) [95% CI]"
)
gtsummary::trial %>%
select(response, age, marker) %>%
tbl_uvregression(
y = response,
method = glm,
method.args = list(family = binomial),
exponentiate = TRUE,
hide_n = TRUE)
tbl_custom_summary(
include = c("Age", "Class"),
by = "Sex",
stat_fns = ~ proportion_summary("Survived", "Yes", weights = "Freq"),
statistic = ~"{prop}% ({n}/{N}) [{conf.low}-{conf.high}]",
digits = ~ list(
function(x) {
style_percent(x, digits = 1)
},
0, 0, style_percent, style_percent
),
overall_row = TRUE,
overall_row_last = TRUE
) %>%
bold_labels() %>%
modify_footnote(
update = all_stat_cols() ~ "Proportion (%) of survivors (n/N) [95% CI]"
)
proportion_summary_ex1 <-
Titanic %>%
as.data.frame() %>%
tbl_custom_summary(
include = c("Age", "Class"),
by = "Sex",
stat_fns = ~ proportion_summary("Survived", "Yes", weights = "Freq"),
statistic = ~"{prop}% ({n}/{N}) [{conf.low}-{conf.high}]",
digits = ~ list(
function(x) {
style_percent(x, digits = 1)
},
0, 0, style_percent, style_percent
),
overall_row = TRUE,
overall_row_last = TRUE
) %>%
bold_labels() %>%
modify_footnote(
update = all_stat_cols() ~ "Proportion (%) of survivors (n/N) [95% CI]"
)
View(proportion_summary_ex1)
Titanic %>%
as.data.frame() %>%
tbl_custom_summary(
include = c("Age", "Class"),
by = "Sex",
stat_fns = ~ proportion_summary("Survived", "Yes", weights = "Freq"),
statistic = ~"{prop}% ({n}/{N}) [{conf.low}-{conf.high}]",
digits = ~ list(
function(x) {
style_percent(x, digits = 1)
},
0, 0, style_percent, style_percent
),
overall_row = TRUE,
overall_row_last = TRUE
) %>%
bold_labels() %>%
modify_footnote(
update = all_stat_cols() ~ "Proportion (%) of survivors (n/N) [95% CI]"
)
data.vax = data.lab %>%
filter(!is.na(exp_vax)) #remove missing exposures
data.vax.nm = data.vax %>%
filter(!is.na(covs)) #remove missing PS covariates
data.vax.nm = data.vax %>%
drop.na(covs) #remove missing PS covariates
data.vax.nm = data.vax %>%
drop_na(covs) #remove missing PS covariates
# model specification for maternal vaccination
# variables are the same ones from the SAS code plus maternal ai
# 1. estimate ps using glm
fit.ps = glm(exp_vax ~ age + factor(seas) + factor(multip) + factor(comp) + factor(comorb) + factor(ster) + factor(rur) + factor(phu) + factor(par) + factor(quint) + factor(care) + factor(smk) + factor(matai),
data=data.exp.nm, family=binomial)
# model specification for maternal vaccination
# variables are the same ones from the SAS code plus maternal ai
# 1. estimate ps using glm
fit.ps = glm(exp_vax ~ age + factor(seas) + factor(multip) + factor(comp) + factor(comorb) + factor(ster) + factor(rur) + factor(phu) + factor(par) + factor(quint) + factor(care) + factor(smk) + factor(matai),
data=data.vax.nm, family=binomial)
# get the predicted values
data.exp.nm$ps = predict(fit.ps, type="response")
# model specification for maternal vaccination
# variables are the same ones from the SAS code plus maternal ai
# 1. estimate ps using glm
fit.ps = glm(exp_vax ~ age + factor(seas) + factor(multip) + factor(comp) + factor(comorb) + factor(ster) + factor(rur) + factor(phu) + factor(par) + factor(quint) + factor(care) + factor(smk) + factor(matai),
data=data.vax.nm, family=binomial)
# get the predicted values
data.vax.nm$ps = predict(fit.ps, type="response")
# apply the summary function to the two exposure groups
tapply(data.vax.nm$ps, data.vax.nm$exp_vax, summary)
# what am I looking to see here?
# plots totally overlap? Maybe something went wrong.
data.vax.nm %>%
mutate(exp_vax = as.factor(exp_vax)) %>%
ggplot(aes(x=ps, group=exp_vax, color= exp_vax)) +
geom_density() +
ggtitle("Propensity Scores") +
theme_light()
weight.res = weightit(exp_vax ~ age + factor(seas) + factor(multip) + factor(comp) + factor(comorb) + factor(ster) + factor(rur) + factor(phu) + factor(par) + factor(quint) + factor(care) + factor(smk) + factor(matai),
data = data.vax.nm,
estimand = "ATE",
stabilize = T,
method = "ps")
summary(weight.res$weights)
bal.tab(weight.res, un = T, thresholds = c(m = .1))
# all of them are balanced now!
love.plot(weight.res)
#ggsave("loveplot.png")
bal.tab(weight.res, un = T, thresholds = c(m = .1))
d2 = data.vax.nm %>%
mutate(across(all_of(cat), as.factor))
c2 = subset(d2, select = covs)
b = bal.tab(exp_vax ~ c2, data=data.vax.nm,
weights = weight.res$weights,
estimand="ATE",
disp = c("means"), un = TRUE,
stats = c("mean.diffs"))
# Make the balance results a df
b1=b$Balance
# create a column with the rownames
b1$names <- rownames(b1)
# next, figure out how to stick it into t1 so that the right names align
View(b1)
# outcome must be numeric or logical but exposure must be factor
curve = data.vax.nm %>%
mutate(exp_vax = as.factor(exp_vax))
# create log model
glm_mod = glm(exp_vax ~ age + factor(seas) + factor(multip) + factor(comp) + factor(comorb) + factor(ster) + factor(rur) + factor(phu) + factor(par) + factor(quint) + factor(care) + factor(smk) + factor(matai) +factor(itp)+factor(jia)+factor(t1d)+factor(ibd)+factor(celiac)+factor(vasc)+factor(sjo)+factor(glom),
data = curve,
family = "binomial" (link="logit"))
# calc adjusted survival curves and plot them
adjsurv = adjustedsurv(data=curve,
variable = "exp_vax",
ev_time = "futime",
event = "out_ai",
method = "iptw_cox",
treatment_model=glm_mod,
conf_int = T)
plot(adjsurv)
# crude Cox PH model
cox_model_crude <- coxph(Surv(futime, out_ai) ~ exp_vax,
data = data.vax.nm)
# get HR estimates
cox_fit_crude  <- cox_model_crude %>%
broom::tidy(., conf.int = T, exponentiate = T)
#summary
summary(cox_model_crude)
# IPTW Cox PH model
cox_model_iptw <- coxph(Surv(futime, out_ai) ~ exp_vax,
data = data.vax.nm,
weights = weights$weights)
# crude Cox PH model
cox_model_crude <- coxph(Surv(futime, out_ai) ~ exp_vax,
data = data.vax.nm)
# get HR estimates
cox_fit_crude  <- cox_model_crude %>%
broom::tidy(., conf.int = T, exponentiate = T)
#summary
summary(cox_model_crude)
# IPTW Cox PH model
cox_model_iptw <- coxph(Surv(futime, out_ai) ~ exp_vax,
data = data.vax.nm,
weights = weight.res$weights)
# get HR estimates
cox_fit_iptw  <- cox_model_iptw %>%
broom::tidy(., conf.int = T, exponentiate = T)
#summary
summary(cox_model_iptw)
# Put HRs into a table
cox_fit_crude %>% bind_rows(cox_fit_iptw)
View(data.vax.nm)
ai = c("itp", "jia", "t1d", "ibd", "celiac", "vasc", "sjo", "glom")
data.vax.nm %>%
select (exp_vax, futime, t1d) %>%
group_by(exp_vax) %>%
summarize(event = sum(n()), total.fu = sum(futime))
data.vax.nm %>%
select (exp_vax, futime, t1d) %>%
group_by(exp_vax) %>%
summarize(event = sum(n()), total.fu.yrs = (sum(futime))/365.25)
data.vax.nm %>% filter(t1d == 1) %>% sum(futime)
data.vax.nm %>% filter(t1d == 1) %>% summarize(sum(futime))
data.vax.nm %>% filter(t1d == 1)
test = data.vax.nm %>% filter(t1d == 1)
View(test)
summarize(sum(test$futime))
test %>% summarize(sum(futime))
data.vax.nm %>%
select (exp_vax, futime, t1d) %>%
group_by(exp_vax) %>%
summarize(event = sum(t1d), total.fu.yrs = (sum(futime)))
data.vax.nm %>%
select (exp_vax, futime, t1d) %>%
group_by(exp_vax) %>%
summarize(event = sum(t1d), total.fu.yrs = (sum(futime))/365.25)
data.vax.nm %>%
filter(exp_vax ==1) %>%
dfSummary()
data.vax.nm %>%
filter(exp_vax ==0) %>%
stview(dfSummary())
data.vax.nm %>%
filter(exp_vax ==0) %>%
dfSummary() %>%
stview()
data.vax.nm %>%
select (exp_vax, futime, t1d) %>%
group_by(exp_vax) %>%
summarize(event = sum(t1d), total.fu.yrs = (sum(futime))/365.25)
data.vax.nm %>%
select (exp_vax, futime, t1d) %>%
group_by(exp_vax) %>%
summarize(event = sum(t1d), total.fu.yrs = (sum(futime))/365.25) %>%
mutate(IR = (event/total.fu.yrs)*1000)
data.vax.nm %>%
pivot_longer_spec()
data.vax.nm %>%
select(exp_vax, itp, jia, t1d, tbd, celiac, vasc, sjo, glom) %>%
pivot_longer(!exp_vax, names_to = "ai_disease", values_to = "events")
data.vax.nm %>%
select(exp_vax, itp, jia, t1d, ibd, celiac, vasc, sjo, glom) %>%
pivot_longer(!exp_vax, names_to = "ai_disease", values_to = "events")
data.vax.nm %>%
select(exp_vax, itp, jia, t1d, ibd, celiac, vasc, sjo, glom) %>%
pivot_longer(!exp_vax, names_to = "ai_disease", values_to = "flag") %>%
group_by(exp_vax, ai_disease) %>%
mutate(events = sum(flag))
data.vax.nm %>%
select(exp_vax, itp, jia, t1d, ibd, celiac, vasc, sjo, glom) %>%
pivot_longer(!exp_vax, names_to = "ai_disease", values_to = "flag") %>%
group_by(ai_disease, exp_vax) %>%
mutate(events = sum(flag))
data.vax.nm %>%
select(exp_vax, itp, jia, t1d, ibd, celiac, vasc, sjo, glom) %>%
pivot_longer(!exp_vax, names_to = "ai_disease", values_to = "flag")
data.vax.nm %>%
select(exp_vax, itp, jia, t1d, ibd, celiac, vasc, sjo, glom) %>%
pivot_longer(!exp_vax, names_to = "ai_disease", values_to = "flag")
data.vax.nm %>%
select(exp_vax, futime, itp, jia, t1d, tbd, celiac, vasc, sjo, glom) %>%
group_by(exp_vax) %>%
summarize_across(event = sum())
data.vax.nm %>%
select(exp_vax, futime, itp, jia, t1d, tbd, celiac, vasc, sjo, glom) %>%
group_by(exp_vax) %>%
summarize(across(event = sum()))
data.vax.nm %>%
select(exp_vax, futime, itp, jia, t1d, ibd, celiac, vasc, sjo, glom) %>%
group_by(exp_vax) %>%
summarize(across(event = sum()))
data.vax.nm %>%
select(exp_vax, futime, itp, jia, t1d, ibd, celiac, vasc, sjo, glom) %>%
group_by(exp_vax) %>%
summarize(across(event = n()))
data.vax.nm %>%
select(exp_vax, futime, itp, jia, t1d, ibd, celiac, vasc, sjo, glom) %>%
group_by(exp_vax) %>%
summarize_all(event = n())
data.vax.nm %>%
select(exp_vax, futime, itp, jia, t1d, ibd, celiac, vasc, sjo, glom) %>%
group_by(exp_vax) %>%
summarize_all(event = n(.x))
data.vax.nm %>%
select(exp_vax, futime, itp, jia, t1d, ibd, celiac, vasc, sjo, glom) %>%
group_by(exp_vax) %>%
summarize_all(event=sum())
data.vax.nm %>%
select(exp_vax, futime, itp, jia, t1d, ibd, celiac, vasc, sjo, glom) %>%
group_by(exp_vax) %>%
summarize(across(everything(), ~ sum(.x)))
# count number of each disease and sum of futime by exposure status
data.vax.nm %>%
select(exp_vax, futime, itp, jia, t1d, ibd, celiac, vasc, sjo, glom) %>%
group_by(exp_vax) %>%
summarize(across(everything(), ~ sum(.x))) %>%
mutate(futime.yrs = futime/365.25)
data.vax.nm %>%
filter(exp_vax ==1) %>%
select(futime) %>%
summarize(totalfu = sum(futime))
data.vax.nm %>%
filter(exp_vax ==0) %>%
select(futime) %>%
summarize(totalfu = sum(futime))
data.vax.nm %>%
select(futime) %>%
group_by(exp_vax) %>%
summarize(totalfu = sum(futime))
data.vax.nm %>%
select(futime, exp_vax) %>%
group_by(exp_vax) %>%
summarize(totalfu = sum(futime))
data.vax.nm %>%
select(futime, exp_vax) %>%
group_by(exp_vax) %>%
summarize(totalfu = sum(futime), totalfu.yr = (sum(futime))/365.25)
data.vax.nm %>%
filter(exp_vax ==1) %>%
select(futime) %>%
summarize(totalfu = sum(futime))
data.vax.nm %>%
filter(exp_vax ==0) %>%
select(futime) %>%
summarize(totalfu = sum(futime))
# trying just one outcome
data.vax.nm %>%
select (exp_vax, futime, t1d) %>%
group_by(exp_vax) %>%
summarize(event = sum(t1d), total.fu.yrs = (sum(futime))/365.25) %>%
mutate(IR = (event/total.fu.yrs)*1000)
# count number of each disease and sum of futime by exposure status
data.vax.nm %>%
select(exp_vax, futime, itp, jia, t1d, ibd, celiac, vasc, sjo, glom) %>%
group_by(exp_vax) %>%
summarize(across(everything(), ~ sum(.x))) %>% #only add the 1s of the diseases
mutate(futime.yrs = futime/365.25)
# count number of each disease and sum of futime by exposure status
outcomes = data.vax.nm %>%
select(exp_vax, futime, itp, jia, t1d, ibd, celiac, vasc, sjo, glom) %>%
group_by(exp_vax) %>%
summarize(across(everything(), ~ sum(.x))) %>% #only add the 1s of the diseases
mutate(futime.yrs = futime/365.25)
outcomes %>%
pivot_longer(!exp_vax, names_to = "ai_disease", values_to = "event")
outcomes %>%
pivot_longer(!(exp_vax, futime, futime.yrs), names_to = "ai_disease", values_to = "sum")
outcomes %>%
pivot_longer(!c(exp_vax, futime, futime.yrs), names_to = "ai_disease", values_to = "sum")
outcomes %>%
pivot_longer(!c(exp_vax, futime, futime.yrs), names_to = "ai_disease", values_to = "sum") %>%
mutate(IR = (sum/futime.yrs)*1000)
outcomes %>%
pivot_longer(!c(exp_vax, futime, futime.yrs), names_to = "ai_disease", values_to = "events") %>%
mutate(IR = (sum/futime.yrs)*1000)
outcomes %>%
pivot_longer(!c(exp_vax, futime, futime.yrs), names_to = "ai_disease", values_to = "events") %>%
mutate(IR = (events/futime.yrs)*1000)
View(outcomes)
outcomes %>%
pivot_longer(!c(futime, futime.yrs), names_to = "ai_disease", values_to = "events") %>%
mutate(IR = (events/futime.yrs)*1000)
outcomes %>%
group_by(exp_vax) %>%
pivot_longer(!c(futime, futime.yrs), names_to = "ai_disease", values_to = "events") %>%
mutate(IR = (events/futime.yrs)*1000)
tidyr::who
tidyr::who %>%
complete.cases()
tidyr::who %>%
filter(!is.na(everything))
outcomes %>%
group_by(exp_vax) %>%
pivot_longer(!c(futime, futime.yrs), names_to = "ai_disease", values_to = "events") %>%
mutate(IR = (events/futime.yrs)*1000)
outcomes %>%
pivot_longer(!c(exp_vax, futime, futime.yrs), names_to = "ai_disease", values_to = "events") %>%
mutate(IR = (events/futime.yrs)*1000)
outcomes %>%
pivot_longer(!c(exp_vax, futime, futime.yrs), names_to = "ai_disease", values_to = "events") %>%
mutate(IR = (events/futime.yrs)*1000) %>%
pivot_wider(names_from = exp_vax, values_from(c(futime, futime.yrs, ai_disease, events, IR)))
outcomes %>%
pivot_longer(!c(exp_vax, futime, futime.yrs), names_to = "ai_disease", values_to = "events") %>%
mutate(IR = (events/futime.yrs)*1000) %>%
pivot_wider(names_from = exp_vax, values_from=(c(futime, futime.yrs, ai_disease, events, IR)))
outcomes %>%
pivot_longer(!c(exp_vax, futime, futime.yrs), names_to = "ai_disease", values_to = "events") %>%
mutate(IR = (events/futime.yrs)*1000) %>%
pivot_wider(names_from = exp_vax, values_from=c(futime, futime.yrs, ai_disease, events, IR))
# duplicate diseases
incidence.tbl = outcomes %>%
pivot_longer(!c(exp_vax, futime, futime.yrs), names_to = "ai_disease", values_to = "events") %>%
mutate(IR = (events/futime.yrs)*1000)
incidence.tbl %>%
pivot_wider(names_from = exp_vax, values_from=c(futime, futime.yrs, ai_disease, events, IR))
View(incidence.tbl)
incidence.tbl %>%
pivot_wider(names_from = exp_vax, values_from=c(futime, futime.yrs, events, IR))
# duplicate diseases
incidence.tbl = outcomes %>%
pivot_longer(!c(exp_vax, futime, futime.yrs), names_to = "ai_disease", values_to = "events") %>%
mutate(IR = (events/futime.yrs)*1000) %>%
pivot_wider(names_from = exp_vax, values_from=c(futime, futime.yrs, events, IR))
View(incidence.tbl)
# duplicate diseases
incidence.tbl = outcomes %>%
pivot_longer(!c(exp_vax, futime, futime.yrs), names_to = "ai_disease", values_to = "events") %>%
mutate(IR = (events/futime.yrs)*1000) %>%
pivot_wider(names_from = exp_vax,
values_from=c(futime, futime.yrs, events, IR),
names_vay = "slowest")
# duplicate diseases
incidence.tbl = outcomes %>%
pivot_longer(!c(exp_vax, futime, futime.yrs), names_to = "ai_disease", values_to = "events") %>%
mutate(IR = (events/futime.yrs)*1000) %>%
pivot_wider(names_from = exp_vax,
values_from=c(futime, futime.yrs, events, IR),
names_vary = "slowest")
View(incidence.tbl)
View(data.vax.nm)
